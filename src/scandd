#!/bin/bash
# scan detection daemon by David Weinman <david@weinman.com>

# This file is licensed under The MIT License, see LICENSE for details.

# <disclaimer -- the algorithm used below seems to be system dependant, and I haven't
#                written a wrapper function to deal with any of that as of yet. As of
#		 now it assumes a debian or debian-based distro because of the way ifconfig
#		 is parsed to get the ip.>

# start the scan_detector background process with a given ip addr
startwith_scandd() {

  DEV=$(/usr/sbin/pdefdev)

  ifconfig $DEV promisc
  /usr/sbin/scan_detector $2 100 "$3" "$4" "$5" "$6" "$7" "$8"

}

# start the scan_detector background process
start_scandd() {

  DEV=$(/usr/sbin/pdefdev)

  ifconfig $DEV promisc
  /usr/sbin/scan_detector $IP 100 "$2" "$3" "$4" "$5" "$6" "$7"

}

# make a graph
make_png() {
  
  if [ -f "./.neato_dat" ]; then
    rm .neato_dat
  fi
  echo "graph G {" >> .neato_dat
  cat /var/log/scandetectd_graph.log >> .neato_dat
  echo "overlap=false}" >> .neato_dat
  NOW=$(date +%F--%R%p); neato -Tpng -o $NOW.png .neato_dat
  NOW=""

}

# kill the scan_detector process
stop_scandd() {

  if [ "$PROCESS_ID" == "" ]; then
    echo "error, nothing to kill?"
    exit
  fi

  kill $PROCESS_ID

}

# display the logs currently along with the current process information
print_status() {

  ps aux > tmp; PS_SD=$(cat tmp | grep scan_detector)
  rm tmp
  echo "
  $PS_SD

  -----
  " > printout
  cat /var/log/scandetectd.log >> printout
  cat printout | less
  rm printout
  PS_SD=""

}

# remove and re-create the logs
clear_logs() {

  if [ ! "$PROCESS_ID" == "" ]; then
    echo "wait! there's a scan detection daemon running!"
    exit
  fi

  echo "" > /var/log/scandetectd.log
  echo "" > /var/log/scandetectd_graph.log

}

# show the usage
echo_usage_exit() {

  echo "Usage: scandd [start [SCAN_TYPE=color] | startwith IP_ADDR [SCAN_TYPE=color] | stop | status | clear | png]"
  exit

}

main() {

# BT 5 / Kali
#IP=$(DEV=$(./pdefdev); ifconfig $DEV | grep -o "192.*"); IP="${IP%%Bcast*}"; IP=${IP/ /}

# Debian 7
  IP=$(DEV=$(/usr/sbin/pdefdev); ifconfig $DEV | grep "inet addr"); IP="${IP%%Bcast*}"; IP="${IP/inet addr:/}"

# OSX 10.9?
#IP=$(DEV=$(sudo ./pdefdev); ifconfig $DEV | grep -o "192.*"); IP="${IP%%netmask*}"

  PROCESS_ID=$(ps -C scan_detector -o pid= ) 

# if the cl args aren't less than nine, print usage and exit
  if [[ ! $# -lt 9 ]]; then

    echo_usage_exit

  fi

# check for log files, if they don't exist, then make them.
  if [[ -f "/var/log/" ]]; then

    mkdir /var/log/

  fi

  if [[ ! -f "/var/log/scandetectd_graph.log" ]]; then

    touch "/var/log/scandetectd_graph.log"
    touch "/var/log/scandetectd.log"

  fi

  if [ "$1" == "startwith" ]; then
    if [ ! "$PROCESS_ID" == "" ]; then
      echo "scandd already running!"
      exit
    fi
    startwith_scandd "$@"
  elif [ "$1" == "start" ]; then
    if [ ! "$PROCESS_ID" == "" ]; then
      echo "scandd already running!"
      exit
    fi
    start_scandd "$@"
  elif [ "$1" == "png" ]; then
    make_png
  elif [ "$1" == "stop" ]; then
    stop_scandd
  elif [ "$1" == "status" ]; then
    print_status
  elif [ "$1" == "clear" ]; then
    clear_logs
  else
    echo_usage_exit
  fi
  DEV=""
  PROCESS_ID=""
  IP=""

}

main "$@"
